# The type Query is used for getting data
type Query {
    job(id: ID!): Job
    jobs: [Job!]
    company(id: ID!): Company
    companies: [Company!]
    user(id: ID!): User
}

# The type Mutation is used for posting data
type Mutation {
    createJob(input: CreateJobInput!): Job
    deleteJob(id: ID!): Job
    updateJob(input: UpdateJobInput!): Job
    updateUserName(input: UpdateUserInput!): User
    updateUserEmail(input: UpdateUserInput!): User
    updateUserPassword(input: UpdateUserInput!): User
    updateUserCompany(input: UpdateUserInput!): User
}

# Regular types can also be called "output types" because they can only be returned by a query
# or a mutation, but input types can only be passed as arguments by a query or a mutation
type Company {
    id: ID!
    name: String!
    description: String
    jobs: [Job!]
}

type Job {
    id: ID!
    title: String!
    company: Company!
    description: String
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    companyId: String!
    company: Company!
    jobs: [Job!]
    companies: [Company!]
}

# input simply means that objects of this type can only be used as input arguments
# for mutations (such as creating new jobs)
input CreateJobInput {
    title: String!
    description: String
}

input UpdateJobInput {
    id: ID!
    title: String!
    description: String
}

input UpdateUserInput {
    id: ID!
    name: String
    email: String
    password: String
    companyId: String
}

input UpdateCompanyInput {
    id: ID!
    name: String!
    description: String!
}
